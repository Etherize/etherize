{"version":3,"file":"static/webpack/static/development/pages/create.js.0b7c30a2a7fe35d2169a.hot-update.js","sources":["webpack:///./src/components/HeavenlyInterface.js"],"sourcesContent":["import React from 'react';\n// import openlaw\nimport {APIClient, Openlaw} from \"openlaw\";\nimport OpenLawForm from \"openlaw-elements\";\n// import AgreementPreview from \"../components/AgreementPreview\";\nimport {\n    MDBAnimation,\n    MDBBtn,\n    MDBCard,\n    MDBCardBody,\n    MDBCardHeader, MDBCardImage,\n    MDBCardText,\n    MDBCol,\n    MDBContainer,\n    MDBRow\n} from \"mdbreact\";\n\nimport \"openlaw-elements/dist/openlaw-elements.min.css\";\nimport \"./HeavenlyInterface.css\";\n\nimport BannerHeader from \"./BannerHeader\";\nimport API from \"./API\";\nimport Modal from \"./Modal\";\nimport LoadingPortal from \"./LoadingPortal\";\nimport Footer from \"./Footer\";\n\nconst COST = \"$400\";\nconst EMAIL = \"etherizehelp@gmail.com\";\n// configure openlaw\n// You can change TEMPLATE_NAME to 'articles-of-organization' to make the code work ...\n// Right now, both deal templates on Etherizeit instance are causing the same issue\n// import getConfig from 'next/config'\n\nexport default class HeavenlyInterface extends React.Component {\n\n    state = {\n        // Variables for OpenLaw API\n        openLawConfig: null,\n        templateName: null,\n\n        //Variables for the UI\n        formVisible: true,\n        reviewVisible: false,\n        finalizeVisible: false,\n\n        // State variables for OpenLaw\n        apiClient:null,\n        title: \"\",\n        template: \"\",\n        compiledTemplate: null,\n        parameters: {},\n        executionResult: null,\n        variables: null,\n        // State variables for preview component\n        previewHTML: null,\n        loading: false,\n        ipfsLoading: false,\n        success: false,\n        progress: 0,\n        progressMessage: \"\",\n\n\n    };\n\n    constructor(props){\n        super(props);\n        this.ChoosePaymentMethodModal = React.createRef();\n        this.PaymentModal = React.createRef();\n        this.MiscellaneousModal = React.createRef();\n        this.togglePaymentMethodModal = this.togglePaymentMethodModal.bind(this);\n        this.payCrypto = this.payCrypto.bind(this);\n    }\n\n    componentDidMount = async () => {\n\n        //create config\n        const openLawConfig = {\n            server: process.env.OpenlawHost,\n            templateName: this.props.templateName,\n            // username: \"SECRET\",\n            // password: \"SECRET_TOO\"\n        };\n\n        // We get the JWT from out backend now instead of logging in via username+password\n        // console.log( \"api host location: \" + process.env.API_HOST);\n\n        const apiClient = new APIClient({root:openLawConfig.server\n            // , auth:{\n            // username:process.env.KaleidoUser,\n            // password:process.env.KaleidoPass, }\n        });\n\n        const [jwt, err] = await API.getJWT();\n        if (err !== \"\" || jwt === \"\"){\n            alert(err);\n            return;\n        }\n        apiClient.jwt = jwt;\n        console.log( \"api jwt: \" + apiClient.jwt);\n\n\n        //Retrieve your OpenLaw template by name, use async/await\n        //   console.log(\"openlaw instance hosted at: \" + openLawConfig.server);\n        const template = await apiClient.getTemplate(openLawConfig.templateName);\n        // console.log(\"template..\", template);\n\n\n        //Retreive the OpenLaw Template, including MarkDown\n        const content = template.content;\n\n        // console.log(\"template..\", template);\n\n        // Get the most recent version of the OpenLaw API Tutorial Template\n        const versions = await apiClient.getTemplateVersions(\n            openLawConfig.templateName,\n            20,\n            1\n        );\n        // console.log(\"versions..\", versions[0], versions.length);\n\n        const title = template.title;\n\n\n\n        //Get my compiled Template, for use in rendering the HTML in previewTemplate\n        const compiledTemplate = await Openlaw.compileTemplate(content);\n        if (compiledTemplate.isError) {\n            throw \"template error: \" + compiledTemplate.errorMessage;\n        }\n        // console.log(\"my compiled template..\", compiledTemplate);\n\n\n\n        const parameters = {\n            \"Organizer Signature\": '{\"email\":\"'+ EMAIL +'\"}',\n        };\n        const { executionResult, errorMessage } = await Openlaw.execute(\n            compiledTemplate.compiledTemplate,\n            {},\n            parameters\n        );\n\n        // console.log(\"execution result:\", executionResult);\n\n        // ** This is helpful for logging in development, or throwing exceptions at runtime.\n        if (errorMessage) {\n            console.error(\"Openlaw Execution Error:\", errorMessage);\n        }\n\n        const variables = await Openlaw.getExecutedVariables(executionResult, {});\n        // console.log(\"variables:\", variables);\n\n        this.setState({\n            openLawConfig,\n            apiClient,\n            title,\n            template,\n            compiledTemplate,\n            parameters,\n            executionResult,\n            variables\n        });\n    };\n\n    showReview() {\n        console.log('Toggle Review');\n    };\n\n    showDefine() {\n        console.log('Toggle Form/Define');\n        this.setState(prevState => ({ formVisible: !prevState.formVisible }));\n    };\n\n    showFinalize() {\n        console.log('Toggle Finalize');\n        this.setState(prevState => ({ finalizeVisible: !prevState.finalizeVisible }));\n    };\n\n\n    onChange = (key, value) => {\n        const parameters = key\n            ? {\n                ...this.state.parameters,\n                [key]: [key].includes(\"Email\")\n                    ? JSON.stringify({ email: value })\n                    : value\n            }\n            : this.state.parameters;\n        this.setState({parameters});\n\n        // ***\n        // Commented out below code and moved it to executeTemplate() as is slows the page down during form filling\n        // ***\n\n        // const { executionResult, errorMessage } = Openlaw.execute(\n        //   compiledTemplate.compiledTemplate,\n        //   {},\n        //   parameters\n        // );\n        // const variables = Openlaw.getExecutedVariables(executionResult, {});\n        //   this.setState({ parameters, variables, executionResult });\n    };\n\n    tryExecuteTemplate(){\n        const { compiledTemplate } = this.state;\n\n        const { executionResult, errorMessage } = Openlaw.execute(\n            compiledTemplate.compiledTemplate,\n            {},\n            this.state.parameters\n        );\n        if (errorMessage!== \"\") {\n            console.log(\"openlaw execute error: \" + errorMessage);\n            return errorMessage;\n        }\n\n        const validationResult = Openlaw.validateContract(executionResult);\n        const missingInputs = Openlaw.getMissingInputs(validationResult);\n        if (missingInputs.length>0){\n            let missingField =  missingInputs[0];\n            if (missingField === \"Member Signature\"){\n                missingField = \"Member Email\"\n            }\n            return \"Please fill all fields, we're missing your \" + missingField;\n        }\n\n\n        const errorArray = Openlaw.validationErrors(validationResult);\n        if (errorArray.length>0){\n            console.log(\"errors:\");\n            console.log(errorArray);\n            return errorArray[0];\n        }\n\n        const variables = Openlaw.getExecutedVariables(executionResult, {});\n        this.setState({ variables, executionResult });\n        return null;\n    }\n\n    uploadParamsHasValidEmail(uploadParams){\n        // try to parse their email in the parameters\n        let json = null;\n        try {\n            json = JSON.parse(uploadParams.parameters[\"Member Signature\"]);\n\n        } catch(e) {\n            return [false, \"\"];\n        }\n\n        const memberEmail = json[\"email\"];\n        return [true, memberEmail];\n    }\n\n    buildOpenLawParamsFromState() {\n\n        const template = this.state.template;\n        const { parameters } = this.state;\n        const object = {\n            templateId: template.id,\n            title: template.title,\n            text: template.content,\n            creator: \"Etherize\",\n            parameters,\n            overriddenParagraphs: {},\n            agreements: {},\n            draftId: \"\"\n        };\n        return object;\n\n    }\n\n    // TODO: check to make sure they've filled out the email field\n    sendDraft = async () => {\n        const { openLawConfig, apiClient, progress, progressMessage } = this.state;\n\n        this.MiscellaneousModal.current.SetTextAndTitle(\"Sending Draft\",\n            \"\");\n        this.MiscellaneousModal.current.ToggleShowing();\n        this.MiscellaneousModal.current.ToggleLoading(true);\n        try {\n\n            //login to api\n            const [jwt, err] = await API.getJWT();\n            if (err !== \"\" || jwt === \"\"){\n                alert(err);\n                return;\n            }\n            apiClient.jwt = jwt;\n\n            const errorInForm = this.tryExecuteTemplate();\n            if (errorInForm != null){\n                this.MiscellaneousModal.current.SetTextAndTitle(\"Error\",\n                    errorInForm);\n                return;\n            }\n\n            //add Open Law params to be uploaded\n            const uploadParams = this.buildOpenLawParamsFromState();\n\n            const [validEmail, memberEmail] = this.uploadParamsHasValidEmail(uploadParams);\n\n            if (!validEmail){\n                this.MiscellaneousModal.current.SetTextAndTitle(\"Error\",\n                    \"We couldn't parse your email address! Please enter a valid email address.\");\n                return\n            }\n\n            console.log(uploadParams.parameters);\n            const contractId = await apiClient.uploadDraft(uploadParams);\n            // console.log(\"Contract ID: \", contractId);\n            await apiClient.sendDraft([], [], contractId);\n\n            this.MiscellaneousModal.current.SetTextAndTitle(\"Success!\",\n                \"You should receive your draft at: \" + memberEmail);\n\n        } catch (error) {\n            this.MiscellaneousModal.current.SetTextAndTitle(\"Error\",\n                \"We tried to send the draft, but got an error: \" + error);\n        }\n\n\n\n    };\n\n    sendContract = async () => {\n        alert(\"Not yet enabled. Waiting for OpenLaw to fix their Deal feature, to issue multiple Contracts at once. \")\n    };\n\n    RequestSignatureFromEtherize = async () => {\n        const { openLawConfig, apiClient, progress, progressMessage } = this.state;\n\n        try {\n            // const {accounts, contract, web3} = this.props;\n\n            const [jwt, err] = await API.getJWT();\n            if (err !== \"\" || jwt === \"\") {\n                alert(err);\n                return;\n            }\n            apiClient.jwt = jwt;\n\n            const errorInForm = this.tryExecuteTemplate();\n            if (errorInForm != null){\n                return [false, errorInForm];\n            }\n\n            //add Open Law params to be uploaded\n            const uploadParams = this.buildOpenLawParamsFromState();\n\n            console.log(uploadParams.parameters);\n            const contractId = await apiClient.uploadContract(uploadParams);\n            console.log(\"Contract ID: \", contractId);\n\n            // looks like openlaw automatically sends the email to the member, so just send to us here\n            await apiClient.sendContract([EMAIL], [EMAIL], contractId);\n            return [true, \"\"];\n\n        } catch (error) {\n            console.log(error);\n            return [false, error];\n        }\n\n\n    };\n\n\n    payFiat = async () => {\n        // TODO; how can we submit to openlaw only after customer is redirected to success url? - We'll still have to\n        // wait for the true billing confirmation but at least this would cut a bit down on spam\n        const [success, err] = await this.RequestSignatureFromEtherize();\n        if (!success){\n            alert(\"Failure to upload to OpenLaw: \" + err);\n            return\n        }\n\n        // after emailing doc to us, show cutomer the stripe checkout\n        const json = await API.getFiatTransaction();\n        const sessionID = json[\"id\"];\n        // live key:\n        // const stripe = window.Stripe(process.env.StripePrivate);\n\n        // test key:\n        const stripe = window.Stripe(process.env.StripeTest);\n\n\n        const {error} = await stripe.redirectToCheckout({\n            sessionId: sessionID\n        });\n\n        if (error!= null){\n            alert(\"Failure to get Stripe Checkout: \" + error.message);\n        }\n\n    };\n\n    // TODO: check that ALL fields are filled or we'll get a 400 error from openlaw\n    togglePaymentMethodModal() {\n\n        const errorInForm = this.tryExecuteTemplate();\n        if (errorInForm != null){\n            this.MiscellaneousModal.current.SetTextAndTitle(\"Error\",\n                errorInForm);\n            this.MiscellaneousModal.current.ToggleShowing();\n            return;\n        }\n\n        // Check for a valid email first\n        const uploadParams = this.buildOpenLawParamsFromState();\n\n        this.ChoosePaymentMethodModal.current.SetTextAndTitle(\"Choose a Payment Method\",\n            \"\");\n        this.ChoosePaymentMethodModal.current.ToggleShowing();\n    }\n\n\n    async payCrypto(cryptoCurrency) {\n\n        const [success, err] = await this.RequestSignatureFromEtherize();\n        if (!success){\n            alert(\"Failure to upload to OpenLaw: \" + err);\n            return\n        }\n\n        this.ChoosePaymentMethodModal.current.ToggleShowing();\n        this.PaymentModal.current.ToggleShowing();\n        this.PaymentModal.current.ToggleLoading(true);\n        const json = await API.getCryptoTransaction(cryptoCurrency);\n\n        if (json[\"error\"] !== \"ok\") {\n            this.PaymentModal.current.SetTextAndTitle(\"Error\", json[\"error\"]);\n            return;\n        }\n\n        const result = json[\"result\"];\n        const address = result[\"Address\"];\n        const statusUrl = result[\"status_url\"];\n        const explanation = \"Please send your \" + cryptoCurrency +\" to the following address: <br/> <br/>\" + address + \"<br/> <br/> \";\n        const followingExplanation = \"Monitor the status of your payment <a href=\" +statusUrl+\"> here </a> \";\n        this.PaymentModal.current.SetTextAndTitle(\"Transaction Created!\", explanation + followingExplanation);\n    };\n\n\n\n\n\n    templatePage(){\n        return(\n            <>\n                {/*MODALS*/}\n                <Modal ref={this.MiscellaneousModal}/>\n                <Modal ref={this.PaymentModal}/>\n                <Modal ref={this.ChoosePaymentMethodModal} >\n                    <MDBRow center={true} >\n                        <MDBCol lg={\"8\"} className={\"mb-4\"}>\n                            <MDBCard border={\"0\"}>\n                                <MDBBtn size=\"lg\" onClick={this.payFiat} className={\"btn-secondary\"}>\n                                    Pay {COST} in USD\n                                </MDBBtn>\n                                <MDBBtn size=\"lg\" onClick={()=> this.payCrypto(\"LTCT\")} className={\"btn-secondary\"}>\n                                    Pay {COST} in BTC (LTCT)\n                                </MDBBtn>\n                                <MDBBtn size=\"lg\"  onClick={()=> this.payCrypto(\"ETH\")} className={\"btn-secondary\"}>\n                                    Pay {COST} in ETH\n                                </MDBBtn>\n                            </MDBCard>\n                        </MDBCol>\n                    </MDBRow>\n                </Modal>\n\n                {/*OPENLAW FORM*/}\n                <MDBContainer>\n                    <MDBRow className=\"py-5 mt-5 \">\n                        <MDBCol md=\"12\">\n                            <MDBAnimation type={\"fadeInUp\"}>\n                                <MDBCard cascade >\n                                    <MDBCardHeader className=\"view view-cascade gradient-card-header standard-card-header-gradient d-flex justify-content-between align-items-center py-2 mx-4 mb-3\">\n                                        <div>\n                                        </div>\n                                        <p className=\"card-title h1\">Define</p>\n                                        <div>\n                                        </div>\n                                    </MDBCardHeader>\n                                    <MDBCardBody className={\"text-center\"}>\n                                        <OpenLawForm  style={{width: '50%'}}\n                                                      apiClient={this.state.apiClient}\n                                                      executionResult={this.state.executionResult}\n                                                      parameters={this.state.parameters}\n                                                      onChangeFunction={this.onChange}\n                                                      openLaw={Openlaw}\n                                                      variables={this.state.variables}\n                                        />\n                                    </MDBCardBody>\n                                </MDBCard>\n                            </MDBAnimation>\n                        </MDBCol>\n                    </MDBRow>\n\n                    {/*<MDBRow className=\"py-5 mt-5 \">*/}\n                    {/*    <MDBCol md=\"12\">*/}\n                    {/*        <MDBAnimation type={\"fadeInUp\"}>*/}\n                    {/*            <MDBCard cascade >*/}\n                    {/*                <MDBCardHeader className=\"view view-cascade gradient-card-header standard-card-header-gradient d-flex justify-content-between align-items-center py-2 mx-4 mb-3\">*/}\n                    {/*                    <div>*/}\n                    {/*                    </div>*/}\n                    {/*                    <p className=\"card-title h1\">Review</p>*/}\n                    {/*                    <div>*/}\n                    {/*                    </div>*/}\n                    {/*                </MDBCardHeader>*/}\n                    {/*                <MDBCardBody className={\"text-center\"}>*/}\n                    {/*                    { this.state.showReview ? null*/}\n                    {/*                        :*/}\n                    {/*                        <MDBBtn id=\"generateButton\" className=\"huge pink ui right labeled icon button btn-secondary bottomMargin \" onClick={this.setTemplatePreview}>Generate Agreement<i className=\"play icon\">*/}\n\n                    {/*                        </i></MDBBtn>*/}\n                    {/*                    }*/}\n\n\n                    {/*                    <AgreementPreview  className=\"subPanel minnish\" id=\"preview\" previewHTML={this.state.previewHTML} />*/}\n                    {/*                </MDBCardBody>*/}\n                    {/*            </MDBCard>*/}\n                    {/*        </MDBAnimation>*/}\n                    {/*    </MDBCol>*/}\n                    {/*</MDBRow>*/}\n\n                    {/*spacing*/}\n                    <MDBRow className={\"mt-5 mb-5\"} >\n\n\n                        {/*spacing*/}\n\n                        {/*<MDBRow className={\"mt-5 mb-5\"} >*/}\n                        <MDBCol className={\"text-center\"} md={\"12\"}>\n                            <MDBAnimation type={\"fadeInUp\"}>\n                                <MDBCard >\n                                    <MDBCardHeader className=\"view view-cascade gradient-card-header standard-card-header-gradient d-flex justify-content-between align-items-center py-2 mx-4 mb-3\">\n                                        <div>\n                                        </div>\n                                        <p className=\"card-title h1\">Finalize</p>\n                                        <div>\n                                        </div>\n                                    </MDBCardHeader>\n\n\n                                    {/*begin cards row*/}\n                                    <MDBRow className={\"mt-2\"}>\n\n                                        <MDBCol lg=\"6\" className=\"mb-3\">\n                                            <MDBAnimation reveal type=\"fadeInUp\">\n                                                <MDBCard cascade >\n                                                    <MDBCardHeader className=\"view view-cascade gradient-card-header standard-card-header-gradient d-flex justify-content-between align-items-center py-2 mx-4 mb-3\">\n                                                        <div/>\n                                                        <p className=\"card-title h4\">Email Draft</p>\n                                                        <div/>\n                                                    </MDBCardHeader>\n                                                    <MDBCardBody cascade>\n                                                        <MDBCardText>\n                                                            You can forward the Draft to your lawyer or your co-founders. <br/> <br/>\n                                                            You can convert the Draft into a Contract when you are ready to Form Entity.\n                                                        </MDBCardText>\n\n                                                        <MDBBtn size=\"lg\" className={\"btn-secondary\"} onClick={this.sendDraft}>\n                                                            Save\n                                                        </MDBBtn>\n                                                    </MDBCardBody>\n                                                </MDBCard>\n                                            </MDBAnimation>\n                                        </MDBCol>\n\n\n\n                                        <MDBCol lg=\"6\" className=\"mb-3\">\n                                            <MDBAnimation reveal type=\"fadeInUp\">\n                                                <MDBCard cascade >\n                                                    <MDBCardHeader className=\"view view-cascade gradient-card-header standard-card-header-gradient d-flex justify-content-between align-items-center py-2 mx-4 mb-3\">\n                                                        <div/>\n                                                        <p className=\"card-title h4\">Purchase</p>\n                                                        <div/>\n                                                    </MDBCardHeader>\n                                                    <MDBCardBody cascade>\n                                                        <MDBCardText>\n                                                            Buy now, pay in fiat or crypto.\n                                                        </MDBCardText>\n                                                        <MDBBtn size=\"lg\" onClick={this.togglePaymentMethodModal} className={\"btn-secondary\"}>\n                                                            Create\n                                                        </MDBBtn>\n                                                    </MDBCardBody>\n                                                </MDBCard>\n                                            </MDBAnimation>\n                                        </MDBCol>\n\n\n                                    </MDBRow>\n                                </MDBCard>\n                            </MDBAnimation>\n                        </MDBCol>\n                    </MDBRow>\n                </MDBContainer>\n                <Footer/>\n            </>\n\n        )\n    }\n\n    render () {\n        const {\n            apiClient,\n            variables,\n            parameters,\n            executionResult,\n            previewHTML,\n            loading,\n            success,\n            ipfsLoading,\n            progress,\n            progressMessage\n        } = this.state;\n\n\n\n        return (\n            <>\n\n                { !this.state.executionResult  ?\n                    <div className={\"portalBackground\"}>\n                        <BannerHeader/>\n                        <LoadingPortal/>\n                    </div>\n                    :\n                    <div className={\"mainBackground\"}>\n                        <BannerHeader/>\n                        {\n                            this.templatePage()\n                        }\n                    </div>\n\n                }\n\n            </>\n        );\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;AA+BA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA5BA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AACA;AA4BA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AADA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AALA;AAQA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAJA;AAbA;AAAA;AACA;AADA;AAAA;AAAA;AAmBA;AAAA;AACA;AApBA;AAAA;AAAA;AAAA;AACA;AAoBA;AArBA;AACA;AADA;AAwBA;AACA;AAIA;AACA;AA9BA;AAAA;AACA;AADA;AA8BA;AACA;AAGA;AACA;AAIA;AACA;AAxCA;AAAA;AACA;AADA;AAwCA;AAKA;AAEA;AACA;AAhDA;AAAA;AACA;AADA;AAoDA;AACA;AArDA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAwDA;AAIA;AACA;AADA;AA5DA;AAAA;AACA;AADA;AAAA;AA+DA;AAAA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AA3EA;AAAA;AACA;AADA;AA4EA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAhFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAVA;AAoHA;AAIA;AAAA;AACA;AAGA;AAAA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AA1IA;AAAA;AAAA;AAAA;AAAA;AAgNA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAPA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAUA;AAA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","sourceRoot":""}